from telegram import Update
from telegram.ext import ContextTypes
from .db import get_by_file_id, get_by_audio_hash, save_track
from .audio import tg_download_video, extract_audio_snip, audio_hash
from .audd import audd_recognize
from .youtube import search_youtube_music, download_mp3, search_youtube_list
import re
from pathlib import Path
from yt_dlp import YoutubeDL
from .config import MP3_DIR
from .db import get_by_url, save_track_url
from .db import get_by_title_or_artist, get_by_url, save_track_url
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
import time
EXPIRE_TIME = 60


import asyncio
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üéµ –û—Ç–ø—Ä–∞–≤—å –≤–∏–¥–µ–æ —Å –º—É–∑—ã–∫–æ–π ‚Äî —è —Ä–∞—Å–ø–æ–∑–Ω–∞—é –∏ —Å–∫–∞—á–∞—é MP3!")

async def handle_video(update: Update, context: ContextTypes.DEFAULT_TYPE):
    m = update.message
    video = None
    snip = None
    mp3 = None
    user = m.from_user
    username = user.username or user.first_name or "Unknown"

    try:
        await m.reply_chat_action("typing")

        # 1Ô∏è‚É£ –°–∫–∞—á–∏–≤–∞–µ–º –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –∑–≤—É–∫
        video = await tg_download_video(update, context)
        snip = await extract_audio_snip(video)
        if not snip:
            await m.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∑–≤—É–∫ –∏–∑ –≤–∏–¥–µ–æ.")
            return

        # 2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –ø–æ –∞—É–¥–∏–æ-—Ö—ç—à—É
        ahash = audio_hash(snip)
        if cached := get_by_audio_hash(ahash):
            await m.reply_text(f"‚ö° –ù–∞–π–¥–µ–Ω–æ –ø–æ –∑–≤—É–∫—É: {cached['artist']} ‚Äî {cached['title']}")
            youtube_url = (
                f"https://www.youtube.com/watch?v={cached.get('youtube_id', '')}"
                if cached.get("youtube_id")
                else ""
            )
            save_track_url(
                url="",
                ahash=ahash,
                artist=cached["artist"],
                title=cached["title"],
                mp3_path=cached["mp3_path"],
                youtube_id=cached.get("youtube_id", ""),
                source_url=youtube_url,
            )
            await m.reply_audio(
                audio=open(cached["mp3_path"], "rb"),
                title=cached["title"],  # ‚Üê –∫—Ä–∞—Å–∏–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–µ–∑ [ID]
                performer=username,
                thumbnail=open("assets/logo1.jpg", "rb")
            )
            return

        # 3Ô∏è‚É£ –†–∞—Å–ø–æ–∑–Ω–∞—ë–º —á–µ—Ä–µ–∑ AUDD
        await m.reply_text("üéß –†–∞—Å–ø–æ–∑–Ω–∞—é —Ç—Ä–µ–∫ —á–µ—Ä–µ–∑ AUDD...")
        audd = await audd_recognize(snip)
        if not audd:
            await m.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç—Ä–µ–∫.")
            return

        artist = audd.get("artist", "Unknown")
        title = audd.get("title", "Unknown")
        duration = audd.get("timecode", 0) or audd.get("length", 0)

        # 4Ô∏è‚É£ –ü–æ–∏—Å–∫ –Ω–∞ YouTube
        vid = search_youtube_music(title, artist, duration)
        if not vid:
            await m.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç—Ä–µ–∫ –Ω–∞ YouTube.")
            return

        # 5Ô∏è‚É£ –°–∫–∞—á–∏–≤–∞–µ–º MP3
        mp3 = await download_mp3(vid, artist, title)
        if not mp3:
            await m.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ MP3.")
            return

        youtube_url = f"https://www.youtube.com/watch?v={vid}"

        # 6Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        save_track_url(
            url="",
            ahash=ahash,
            artist=artist,
            title=title,
            mp3_path=str(mp3),
            youtube_id=vid,
            source_url=youtube_url,
        )

        # 7Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

        await m.reply_audio(
            audio=open(mp3, "rb"),
            title=title,
            performer=username,
            thumbnail=open("assets/logo1.jpg", "rb"),
        )

    except Exception as e:
        # —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
        from .config import log
        log.error(f"[handle_video] ‚ùå –û—à–∏–±–∫–∞: {e}", exc_info=True)
        await m.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

    finally:
        # 8Ô∏è‚É£ –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        cleanup_files(video, snip, mp3)

async def handle_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    m = update.message
    url = m.text.strip()
    user = m.from_user
    username = user.username or user.first_name or "Unknown"

    if not re.match(r'https?://', url):
        return

    await m.reply_chat_action("typing")

    # üß† 1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –ø–æ —Å—Å—ã–ª–∫–µ
    if cached := get_by_url(url):
        await m.reply_text(f"‚ö° –ò–∑ –∫—ç—à–∞ (–ø–æ —Å—Å—ã–ª–∫–µ): {cached['artist']} ‚Äî {cached['title']}")
        await m.reply_audio(
            audio=open(cached["mp3_path"], "rb"),
            title=cached["title"],  # ‚Üê –∫—Ä–∞—Å–∏–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–µ–∑ [ID]
            performer=username,
            thumbnail=open("assets/logo1.jpg", "rb")
        )
        return
        return

    tmp_video = Path("temp_video.mp4")
    snip = None

    try:
        # 2Ô∏è‚É£ –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
        ydl_opts = {
            "format": "mp4",
            "quiet": True,
            "outtmpl": str(tmp_video),
        }

        await asyncio.to_thread(lambda: YoutubeDL(ydl_opts).download([url]))

        # 3Ô∏è‚É£ –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–≤—É–∫
        snip = await extract_audio_snip(tmp_video)
        if not snip:
            await m.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∑–≤—É–∫ –∏–∑ –≤–∏–¥–µ–æ.")
            return

        # 4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –ø–æ –∑–≤—É–∫—É
        ahash = audio_hash(snip)
        if cached := get_by_audio_hash(ahash):
            await m.reply_text(f"‚ö° –ù–∞–π–¥–µ–Ω–æ –ø–æ –∑–≤—É–∫—É: {cached['artist']} ‚Äî {cached['title']}")
            save_track_url(url, ahash, cached["artist"], cached["title"], cached["mp3_path"], "", "")
            await m.reply_audio(
                audio=open(cached["mp3_path"], "rb"),
                title=cached["title"],  # ‚Üê –∫—Ä–∞—Å–∏–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–µ–∑ [ID]
                performer=username,
                thumbnail=open("assets/logo1.jpg", "rb")
            )
            return

        # 5Ô∏è‚É£ –†–∞—Å–ø–æ–∑–Ω–∞—ë–º —á–µ—Ä–µ–∑ AUDD
        await m.reply_text("üéß –†–∞—Å–ø–æ–∑–Ω–∞—é —Ç—Ä–µ–∫ —á–µ—Ä–µ–∑ AUDD...")
        audd = await audd_recognize(snip)
        if not audd:
            await m.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç—Ä–µ–∫.")
            return

        artist = audd.get("artist", "Unknown")
        title  = audd.get("title", "Unknown")
        query  = f"{artist} {title} official audio"

        # 6Ô∏è‚É£ –ò—â–µ–º –∏ —Å–∫–∞—á–∏–≤–∞–µ–º MP3
        duration = audd.get("timecode", 0) or audd.get("length", 0)
        vid = search_youtube_music(title, artist, duration)
        if not vid:
            await m.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç—Ä–µ–∫ –Ω–∞ YouTube.")
            return

        mp3 = await download_mp3(vid, artist, title)
        if not mp3:
            await m.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ MP3.")
            return
        print(vid)
        youtube_url = f"https://www.youtube.com/watch?v={vid}"

        # 7Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –∫—ç—à–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É
        save_track_url(url, ahash, artist, title, str(mp3), vid, youtube_url)
        await m.reply_text(f"üé∂ {artist} ‚Äî {title}")
        await m.reply_audio(
            audio=open(mp3, "rb"),
            title=title,
            performer=username,
            thumbnail=open("assets/logo1.jpg", "rb"),
        )

    finally:
        cleanup_files(tmp_video, snip)
# –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤—ã–±–æ—Ä–∞ (user_id -> —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤)
user_choices = {}

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    m = update.message
    query = m.text.strip()

    if re.match(r'https?://', query):
        return

    await m.reply_chat_action("typing")

    # 1Ô∏è‚É£ –ò—â–µ–º —Ç—Ä–µ–∫–∏
    tracks = search_youtube_list(query, limit=10)
    if not tracks:
        await m.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç—Ä–µ–∫–∏.")
        return

    # 2Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä
    user_choices[m.from_user.id] = {
        "tracks": tracks,
        "timestamp": time.time(),
        "message_id": None,
    }

    # 3Ô∏è‚É£ –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–Ω–æ–ø–∫–∏
    text_lines = []
    buttons = []
    for i, t in enumerate(tracks, start=1):
        title = t.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        duration = int(float(t.get("duration", 0) or 0))
        mins, secs = divmod(duration, 60)
        text_lines.append(f"{i}. {title} ({mins}:{secs:02d})")
        buttons.append([InlineKeyboardButton(str(i), callback_data=f"choose_{i}")])

    text = "üé∂ –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç—Ä–µ–∫–æ–≤:\n\n" + "\n".join(text_lines)
    markup = InlineKeyboardMarkup(buttons)

    msg = await m.reply_text(text, reply_markup=markup)
    user_choices[m.from_user.id]["message_id"] = msg.message_id

    # 4Ô∏è‚É£ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä —É–¥–∞–ª–µ–Ω–∏—è –≤ —Ñ–æ–Ω–µ
    asyncio.create_task(delete_message_later(context, m.chat_id, msg.message_id, m.from_user.id))


async def delete_message_later(context, chat_id, message_id, user_id):
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ EXPIRE_TIME —Å–µ–∫—É–Ω–¥"""
    await asyncio.sleep(EXPIRE_TIME)
    try:
        await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
        user_choices.pop(user_id, None)
    except Exception:
        pass

async def handle_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):

    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    data = query.data
    user = query.from_user
    username = user.username or user.first_name or "Unknown"


    if not data.startswith("choose_"):
        return

    user_data = user_choices.get(user_id)
    if not user_data:
        await query.edit_message_text("‚ö†Ô∏è –í—ã–±–æ—Ä —É—Å—Ç–∞—Ä–µ–ª.")
        return

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏
    if time.time() - user_data["timestamp"] > EXPIRE_TIME:
        await query.edit_message_text("‚ö†Ô∏è –í—Ä–µ–º—è –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–µ–∫–ª–æ.")
        user_choices.pop(user_id, None)
        return

    tracks = user_data["tracks"]
    idx = int(data.split("_")[1]) - 1
    if idx < 0 or idx >= len(tracks):
        await query.edit_message_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")
        return

    chosen = tracks[idx]
    vid = chosen.get("id")
    title = chosen.get("title", "Unknown")
    artist = "Unknown"
    youtube_url = f"https://www.youtube.com/watch?v={vid}"

    await query.message.reply_text(f"üéß –°–∫–∞—á–∏–≤–∞—é: {title}...")

    mp3 = await download_mp3(vid, artist, title)
    if not mp3:
        await query.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏.")
        return

    # üî• –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
    from .audio import audio_hash
    ahash = audio_hash(mp3)
    save_track_url(
        url=None,  # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ URL –Ω–µ—Ç
        ahash=ahash,
        artist=artist,
        title=title,
        mp3_path=str(mp3),
        youtube_id=vid,
        source_url=youtube_url  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∏—Å—Ç–æ—á–Ω–∏–∫
    )

    await query.message.reply_audio(
        audio=open(mp3, "rb"),
        title=title,  # üéµ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ (–≤ –ø–ª–µ–µ—Ä–µ)
        performer=username,  # üë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ ‚Äú–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å‚Äù
        thumbnail=open("assets/logo1.jpg", "rb")
    )


def cleanup_files(*paths: Path):
    for p in paths:
        if p and p.exists():
            p.unlink(missing_ok=True)