import asyncio
import re
from pathlib import Path
from yt_dlp import YoutubeDL
from .config import MP3_DIR, log

COOKIES_FILE = Path(__file__).parent / "cookies.txt"
MAX_VIDEO_DURATION = 300  # –º–∞–∫—Å–∏–º—É–º 5 –º–∏–Ω—É—Ç

# === –ü–æ–∏—Å–∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–ª–∏ –ø–æ–ø—É–ª—è—Ä–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞ ===
def search_youtube_music(title: str, artist: str, duration: int | None = None) -> str | None:
    """–ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–∞ –Ω–∞ YouTube —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –∏ –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ."""
    query = f"{artist} {title}".strip()
    ydl_opts = {
        "quiet": True,
        "extract_flat": "in_playlist",
        "skip_download": True,
        "default_search": "ytsearch20",
    }

    if COOKIES_FILE.exists():
        ydl_opts["cookiefile"] = str(COOKIES_FILE)

    try:
        with YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(query, download=False)
    except Exception as e:
        print(f"[YouTube] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        return None

    entries = info.get("entries", [])
    if not entries:
        print("[YouTube] ‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç.")
        return None

    # --- 1. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –º—É—Å–æ—Ä–∞ (–Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º slowed/sped up) ---
    filtered = []
    for v in entries:
        title_l = v.get("title", "").lower()
        dur = v.get("duration") or 0

        # –∏—Å–∫–ª—é—á–∞–µ–º –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–∏–ø—ã
        if re.search(r"(remix|edit|cover|nightcore|8d|live|extended)", title_l):
            continue

        # –∏—Å–∫–ª—é—á–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ (>5 –º–∏–Ω)
        if dur == 0 or dur > MAX_VIDEO_DURATION:
            continue

        filtered.append(v)
        print(f"[YouTube] ‚úÖ –î–æ–ø—É—â–µ–Ω–æ: {v.get('title')} ({dur}s)")

    if not filtered:
        print("[YouTube] ‚ö†Ô∏è –ü–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∏–¥–µ–æ ‚â§5 –º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return None

    # --- 2. –ü—Ä–∏–æ—Ä–∏—Ç–µ–∑–∞—Ü–∏—è ---
    def score(video):
        title_l = video.get("title", "").lower()
        uploader = video.get("uploader", "").lower()
        dur = video.get("duration") or 0
        s = 0

        # –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∫–∞–Ω–∞–ª–æ–≤
        if "topic" in uploader or "official" in uploader or "vevo" in uploader:
            s -= 10

        # —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∞—Ä—Ç–∏—Å—Ç–∞
        if artist and artist.lower() in title_l:
            s -= 5

        # —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if duration:
            try:
                s += abs(int(dur) - int(duration))
            except Exception:
                pass

        return s

    best = sorted(filtered, key=score)[0]
    print(f"[YouTube] üéØ –í—ã–±—Ä–∞–Ω: {best.get('title')} ({best.get('uploader')}, {best.get('duration')}s)")
    return best.get("id")


# === –ó–∞–≥—Ä—É–∑–∫–∞ mp3 ===
async def download_mp3(video_id: str, artist: str, title: str) -> Path | None:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ç—Ä–µ–∫ –≤ mp3, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—è –±–∏—Ç—Ä–µ–π—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è—è —Ä–∞–∑–º–µ—Ä."""
    safe_title = f"{artist} - {title}".strip().replace("/", "_").replace("\\", "_")
    dst = MP3_DIR / f"{safe_title}.mp3"
    if dst.exists():
        print(f"[Cache] ‚ö° –£–∂–µ –µ—Å—Ç—å: {dst.name}")
        return dst

    ydl_opts = {
        "format": "bestaudio/best",
        "quiet": True,
        "outtmpl": str(MP3_DIR / f"{safe_title}.%(ext)s"),
        "postprocessors": [{
            "key": "FFmpegExtractAudio",
            "preferredcodec": "mp3",
            "preferredquality": "192",
        }],
        "postprocessor_args": ["-b:a", "192k"],  # –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –±–∏—Ç—Ä–µ–π—Ç
    }

    loop = asyncio.get_event_loop()
    try:
        await loop.run_in_executor(
            None,
            lambda: YoutubeDL(ydl_opts).download([f"https://www.youtube.com/watch?v={video_id}"])
        )
        if dst.exists():
            size_mb = dst.stat().st_size / 1024 / 1024
            if size_mb > 50:
                print(f"[YouTube] ‚ö†Ô∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({size_mb:.1f} –ú–ë) ‚Äî —É–¥–∞–ª—ë–Ω.")
                dst.unlink(missing_ok=True)
                return None
            print(f"[YouTube] üíæ –°–∫–∞—á–∞–Ω–æ: {dst.name} ({size_mb:.1f} –ú–ë)")
            return dst
        print("[YouTube] ‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏.")
        return None
    except Exception as e:
        log.error(f"[YouTube] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        return None
def search_youtube_list(query: str, limit: int = 10) -> list[dict]:
    """–ü–æ–∏—Å–∫ YouTube —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –∏ –ª–µ–π–±–ª–æ–≤ (–≤–∫–ª—é—á–∞—è 'Provided to YouTube')."""

    ydl_opts = {
        "quiet": True,
        "skip_download": True,
        "noplaylist": True,
        "extract_flat": True,
        "default_search": "ytsearch20",
        "force_generic_extractor": True,
    }

    if COOKIES_FILE.exists():
        ydl_opts["cookiefile"] = str(COOKIES_FILE)

    try:
        with YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(f"ytsearch20:{query}", download=False)
    except Exception as e:
        print(f"[YouTube] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        return []

    entries = info.get("entries") if isinstance(info, dict) else None
    if not entries:
        print("[YouTube] ‚ö†Ô∏è –ü—É—Å—Ç—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞")
        return []

    results = []
    for v in entries:
        if not isinstance(v, dict):
            continue

        url = v.get("url") or v.get("webpage_url")
        title = v.get("title", "")
        duration = v.get("duration") or 0
        uploader = (v.get("uploader") or "").lower()

        if not url or not title:
            continue
        if duration < 30 or duration > MAX_VIDEO_DURATION:
            continue
        if "shorts" in url.lower() or "shorts" in title.lower():
            continue

        # üíø –†–∞—Å—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã
        priority = 0

        # 1Ô∏è‚É£ –ö–∞–Ω–∞–ª—ã –ª–µ–π–±–ª–æ–≤ –∏ –¥–∏—Å—Ç—Ä–∏–±—å—é—Ç–æ—Ä–æ–≤
        if any(word in uploader for word in ["vevo", "records", "label", "music", "official"]):
            priority += 10

        # 2Ô∏è‚É£ Provided to YouTube (Topic-–∫–∞–Ω–∞–ª—ã)
        if " - topic" in uploader:
            priority += 15  # —Å–∞–º—ã–π –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç

        # 3Ô∏è‚É£ –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç official audio/video
        if "official" in title.lower() or "audio" in title.lower():
            priority += 5

        # 4Ô∏è‚É£ –ù–∞–æ–±–æ—Ä–æ—Ç ‚Äî –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–µ–º–∏–∫—Å—ã / slowed / sped up ‚Äî –ø–æ–Ω–∏–∂–∞–µ–º
        if any(bad in title.lower() for bad in ["remix", "slowed", "sped up", "nightcore", "8d"]):
            priority -= 10

        v["_priority"] = priority
        results.append(v)

    # üìä –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    results.sort(key=lambda x: x.get("_priority", 0), reverse=True)

    return results[:limit]